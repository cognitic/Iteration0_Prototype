using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;

namespace Iteration0.Data.Repositories
{
    /// <summary>
    ///     Interface for factory which is in charge of creating new DbContexts
    /// </summary>
    /// <autogeneratedoc />
    public interface IDatabaseContextFactory
    {
        /// <summary>
        /// Creates new Master Database Context.
        /// </summary>
        /// <returns>newly created MasterDatabaseContext</returns>
        /// <autogeneratedoc />
        DbContext MasterDbContext();
    }


    /// <inheritdoc />
    /// <summary>
    /// This is factory which is in charge of creating new DbContexts
    /// It is implemented as Singleton as factory should be implemented (according to Gang of four) 
    /// </summary>
    /// <seealso cref="T:Master.Domain.DataAccessLayer.IDatabaseContextFactory" />
    /// <autogeneratedoc />
    public class DatabaseContextFactory : IDatabaseContextFactory
    {
        /// <summary>
        /// This is implementation of singleton
        /// </summary>
        /// <remarks>
        /// To read more, visit: http://csharpindepth.com/Articles/General/Singleton.aspx (Jon skeet)
        /// </remarks>
        /// <autogeneratedoc />
        private static readonly DatabaseContextFactory instance = new DatabaseContextFactory();

        // Explicit static constructor to tell C# compiler
        // not to mark type as beforefieldinit (more about this: http://csharpindepth.com/Articles/General/Beforefieldinit.aspx)
        static DatabaseContextFactory()
        {

        }

        //so that class cannot be initiated 
        private DatabaseContextFactory()
        {
        }


        /// <summary>
        /// Instance of DatabaseContextFactory
        /// </summary>
        public static DatabaseContextFactory Instance => instance;

        /// <inheritdoc />
        /// <summary>
        /// Creates new MasterDatabaseContext
        /// </summary>
        /// <returns></returns>
        public DbContext MasterDbContext()
        {
            return new MasterDatabaseContext();
        }
    }
}